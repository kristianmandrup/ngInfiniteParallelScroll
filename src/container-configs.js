// Generated by LiveScript 1.2.0
(function(){
  var navigatorHelper, BaseContainerConfig, WindowContainerConfig, DomContainerConfig;
  navigatorHelper = require('./navigator');
  BaseContainerConfig = (function(){
    BaseContainerConfig.displayName = 'BaseContainerConfig';
    var prototype = BaseContainerConfig.prototype, constructor = BaseContainerConfig;
    importAll$(prototype, arguments[0]);
    function BaseContainerConfig(debug){
      this.log();
      this.configure();
    }
    prototype.log = function(){
      return debug("container configuration");
    };
    prototype.containerBottom = function(){
      return this._containerBottom = calcContainerBottom();
    };
    prototype.elemBottom = function(){
      return this._elementBottom = calcElemBottom();
    };
    prototype.cHeight = function(){
      return this.container.height();
    };
    prototype.eHeight = function(){
      return this.elem.height();
    };
    prototype.configure = function(){};
    prototype.isChromeBrowser = function(){
      return this.browserName() === 'Chrome';
    };
    prototype.browserName = function(){
      return navigatorHelper.sayswho.match(/\w+/)[0];
    };
    prototype.browserVersion = function(){
      return parseInt(navigatorHelper.sayswho.match(/\d+/)[0], 10);
    };
    return BaseContainerConfig;
  }(Debugger));
  WindowContainerConfig = (function(superclass){
    var prototype = extend$((import$(WindowContainerConfig, superclass).displayName = 'WindowContainerConfig', WindowContainerConfig), superclass).prototype, constructor = WindowContainerConfig;
    function WindowContainerConfig(debug){
      WindowContainerConfig.superclass.apply(this, arguments);
    }
    prototype.calcContainerBottom = function(){
      return this.container.height() + this.container.scrollTop();
    };
    prototype.calcElemBottom = function(){
      return this.elem.offset().top + this.eHeight();
    };
    prototype.configure = function(){
      if (this.isChromeBrowser() && this.browserVersion >= 34) {
        return this.configureForChrome();
      }
    };
    prototype.configureForChrome = function(){
      return this.cHeight = function(){
        return this.container.innerHeight();
      };
    };
    return WindowContainerConfig;
  }(BaseContainerConfig));
  DomContainerConfig = (function(superclass){
    var prototype = extend$((import$(DomContainerConfig, superclass).displayName = 'DomContainerConfig', DomContainerConfig), superclass).prototype, constructor = DomContainerConfig;
    function DomContainerConfig(debug){
      DomContainerConfig.superclass.apply(this, arguments);
    }
    prototype.calcContainerBottom = function(){
      return this.cHeight();
    };
    prototype.calcElemBottom = function(){
      return this.elem.offset().top - this.container.offset().top + this.eHeight();
    };
    return DomContainerConfig;
  }(BaseContainerConfig));
  module.exports = {
    BaseContainerConfig: BaseContainerConfig,
    WindowContainerConfig: WindowContainerConfig,
    DomContainerConfig: DomContainerConfig
  };
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
