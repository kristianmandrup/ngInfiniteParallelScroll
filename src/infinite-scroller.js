// Generated by LiveScript 1.2.0
(function(){
  var mod, Throttler, ScrollHandler;
  mod = angular.module('infinite-scroll', []);
  mod.value('THROTTLE_MILLISECONDS', null);
  Throttler = require('./throttler');
  ScrollHandler = require('./scroll-handler');
  mod.directive('infiniteScroller', [
    '$rootScope', '$window', '$timeout', 'THROTTLE_MILLISECONDS', function($rootScope, $window, $timeout, THROTTLE_MILLISECONDS){
      return {
        scope: {
          infiniteScroll: '&',
          infiniteScrollContainer: '=',
          infiniteScrollDistance: '=',
          infiniteScrollDisabled: '='
        },
        config: new ScrollConfig,
        scrollHandler: function(){
          return this._handler || (this._handler = new ScrollHandler.handleScroll);
        },
        throttler: function(){
          return this._throttle || (this._throttle = new Throttler($timeout));
        },
        handleInfiniteScrollDisabled: function(value){
          this.configToggleScrollEnabled(value);
          if (this.config.isScrollEnabled()) {
            this.config.disableScroll();
            return this.handler();
          }
        },
        handleInfiniteScrollContainer: function(newContainer){
          if (!this.isValidContainer(newContainer)) {
            return;
          }
          return this.changeContainer(newContainer);
        },
        isValidContainer: function(container){
          return container != null && container.length > 0;
        },
        changeContainer: function(newContainer){
          newContainer = this.wrapAngular(newContainer);
          if (this.container != null) {
            this.container.off('scroll', handler);
          }
          this.container = newContainer;
          return this.container.on('scroll', handler);
        },
        wrapAngular: function(element){
          return angular.element(element);
        },
        link: function(scope, elem, attrs){
          var $window, handleInfiniteScrollDistance, self;
          $window = this.wrapAngular($window);
          if (THROTTLE_MILLISECONDS != null) {
            this.scrollHandler = this.throttler().config(this.scrollHandler(), THROTTLE_MILLISECONDS);
          }
          scope.$on('$destroy', function(){
            return this.config.container.off('scroll', handler);
          });
          handleInfiniteScrollDistance = function(value){
            return this.config.setScrollDistance(value);
          };
          scope.$watch('infiniteScrollDistance', handleInfiniteScrollDistance);
          handleInfiniteScrollDistance(scope.infiniteScrollDistance);
          scope.$watch('infiniteScrollDisabled', handleInfiniteScrollDisabled);
          handleInfiniteScrollDisabled(scope.infiniteScrollDisabled);
          this.changeContainer($window);
          scope.$watch('infiniteScrollContainer', handleInfiniteScrollContainer);
          handleInfiniteScrollContainer(scope.infiniteScrollContainer || []);
          if (attrs.infiniteScrollParent != null) {
            this.changeContainer(this.wrapAngular(elem.parent()));
          }
          if (attrs.infiniteScrollImmediateCheck != null) {
            this.config.immediateCheck = scope.$eval(attrs.infiniteScrollImmediatecheck);
          }
          self = this;
          return $timeout(function(){
            if (self.immediateCheck) {
              return self.handler();
            }
          }, 0);
        }
      };
    }
  ]);
}).call(this);
