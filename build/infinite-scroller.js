(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var mod, Throttler, ScrollHandler;
  mod = angular.module('infinite-scroll', []);
  mod.value('THROTTLE_MILLISECONDS', null);
  Throttler = require('./throttler');
  ScrollHandler = require('./scroll-handler');
  mod.directive('infiniteScroller', [
    '$rootScope', '$window', '$timeout', 'THROTTLE_MILLISECONDS', function($rootScope, $window, $timeout, THROTTLE_MILLISECONDS){
      return {
        scope: {
          infiniteScroll: '&',
          infiniteScrollContainer: '=',
          infiniteScrollDistance: '=',
          infiniteScrollDisabled: '='
        },
        config: new ScrollConfig,
        scrollHandler: function(){
          return this._handler || (this._handler = new ScrollHandler.handleScroll);
        },
        throttler: function(){
          return this._throttle || (this._throttle = new Throttler($timeout));
        },
        handleInfiniteScrollDisabled: function(value){
          this.configToggleScrollEnabled(value);
          if (this.config.isScrollEnabled()) {
            this.config.disableScroll();
            return this.handler();
          }
        },
        handleInfiniteScrollContainer: function(newContainer){
          if (!this.isValidContainer(newContainer)) {
            return;
          }
          return this.changeContainer(newContainer);
        },
        isValidContainer: function(container){
          return container != null && container.length > 0;
        },
        changeContainer: function(newContainer){
          newContainer = this.wrapAngular(newContainer);
          if (this.container != null) {
            this.container.off('scroll', handler);
          }
          this.container = newContainer;
          return this.container.on('scroll', handler);
        },
        wrapAngular: function(element){
          return angular.element(element);
        },
        link: function(scope, elem, attrs){
          var $window, handleInfiniteScrollDistance, self;
          $window = this.wrapAngular($window);
          if (THROTTLE_MILLISECONDS != null) {
            this.scrollHandler = this.throttler().config(this.scrollHandler(), THROTTLE_MILLISECONDS);
          }
          scope.$on('$destroy', function(){
            return this.config.container.off('scroll', handler);
          });
          handleInfiniteScrollDistance = function(value){
            return this.config.setScrollDistance(value);
          };
          scope.$watch('infiniteScrollDistance', handleInfiniteScrollDistance);
          handleInfiniteScrollDistance(scope.infiniteScrollDistance);
          scope.$watch('infiniteScrollDisabled', handleInfiniteScrollDisabled);
          handleInfiniteScrollDisabled(scope.infiniteScrollDisabled);
          this.changeContainer($window);
          scope.$watch('infiniteScrollContainer', handleInfiniteScrollContainer);
          handleInfiniteScrollContainer(scope.infiniteScrollContainer || []);
          if (attrs.infiniteScrollParent != null) {
            this.changeContainer(this.wrapAngular(elem.parent()));
          }
          if (attrs.infiniteScrollImmediateCheck != null) {
            this.config.immediateCheck = scope.$eval(attrs.infiniteScrollImmediatecheck);
          }
          self = this;
          return $timeout(function(){
            if (self.immediateCheck) {
              return self.handler();
            }
          }, 0);
        }
      };
    }
  ]);
}).call(this);

},{"./scroll-handler":2,"./throttler":3}],2:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var ScrollHandler;
  ScrollHandler = (function(){
    ScrollHandler.displayName = 'ScrollHandler';
    var prototype = ScrollHandler.prototype, constructor = ScrollHandler;
    function ScrollHandler(scope, config){
      this.scope = scope;
      this.config = config;
      this.container = this.config.container;
      this.elem = this.config.elem;
      this.scrollDistance = this.config.scrollDistance;
      this.scrollEnabled = this.config.scrollEnabled;
      this;
    }
    prototype.handleScroll = function(){
      if (this.shouldScroll()) {
        return this.scroll();
      }
    };
    prototype.isWindowContainer = function(){
      return this.container === $window;
    };
    prototype.scroll = function(){
      if (this.scrollEnabled) {
        return this.performScroll();
      } else {
        return this.enableScroll();
      }
    };
    prototype.performScroll = function(){
      this.configureScroll();
      return this.scope.infiniteScroll();
    };
    prototype.enableScroll = function(){
      return this.config.enableScroll();
    };
    prototype.configureScroll = function(){
      if (this.isWindowContainer()) {
        return this.configWindowScroll();
      } else {
        return this.configContainerScroll();
      }
    };
    prototype.shouldScroll = ScrollHandler.remaining() <= ScrollHandler.scrollBoundary();
    prototype.scrollBoundary = function(){
      return this.container.height() * this.scrollDistance + 1;
    };
    prototype.remaining = function(){
      return this._remaining || (this._remaining = this.elementBottom - this.containerBottom);
    };
    prototype.configWindowScroll = function(){
      this.containerBottom = this.container.height() + this.container.scrollTop();
      return this.elementBottom = this.elem.offset().top + this.elem.height();
    };
    prototype.configContainerScroll = function(){
      var containerBottom, elementBottom;
      containerBottom = this.container.height();
      return elementBottom = this.elem.offset().top - this.container.offset().top + this.elem.height();
    };
    return ScrollHandler;
  }());
  module.exports = ScrollHandler;
}).call(this);

},{}],3:[function(require,module,exports){
// Generated by LiveScript 1.2.0
(function(){
  var Throttler;
  Throttler = (function(){
    Throttler.displayName = 'Throttler';
    var prototype = Throttler.prototype, constructor = Throttler;
    function Throttler($timeout){
      this.$timeout = $timeout;
    }
    prototype.config = function(func, wait){
      this.func = func;
      this.wait = wait;
      return this.throttle;
    };
    prototype.throttle = function(){
      if (this.noTimeRemaining()) {
        return this.reset();
      } else {
        return this.setTimeout();
      }
    };
    prototype.noTimeRemaining = function(){
      return this.remainingTime() <= 0;
    };
    prototype.remainingTime = function(){
      return this.remaining || (this.remaining = wait - (this.now() - this.previous));
    };
    prototype.setTimeout = function(){
      return this.timeout || (this.timeout = $timeout(later, remaining));
    };
    prototype.reset = function(){
      this.clearTimeout(this.timeout);
      this.$timeout.cancel(this.timeout);
      this.timeout = null;
      this.previous = this.now();
      return this.func.call();
    };
    prototype.now = function(){
      return this._now || (this._now = new Date().getTime());
    };
    prototype.timeout = null;
    prototype.previous = 0;
    prototype.later = function(){
      this.previous = new Date().getTime();
      this.$timeout.cancel(timeout);
      this.timeout = null;
      this.func.call();
      return this.context = null;
    };
    return Throttler;
  }());
}).call(this);

},{}]},{},[1])